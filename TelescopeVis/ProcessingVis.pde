// The visualisation of telescope scheduling

// The instance data
Instance instance;
int nSlots = 50;

// Solver
Solver[] solvers;
Solver solver;
int sIdx;

// Appearance
int wdth = 800;
int hght = 800;
int txtSze = 20;
int brightness = 50;
float[] bgColour = {0.f,0.f,0.f};
float padding = txtSze*0.3;

// Data for drawing
int[] nextSchedule;
int[] prevSchedule;
int[][] colourTable;
float t;
float tSmooth;
float stepSize = 0.3;
float nextSize = 0.03;
float targetWidth;
int nColours;
boolean stepping=true;
float pLineDist;
float nLineDist;
int[] pOccs;
int[] nOccs;
int[] pFstLst;
int[] nFstLst;

float[] nBestScore;
float[] nCurrentScore;
float[] pBestScore;
float[] pCurrentScore;

// set everything up the first time
void setup() {
  
  size(wdth,hght);
  colorMode(HSB,360,100,100);
  textSize(txtSze);

  sIdx=0;
  setInstance(bigInstance1(),nSlots);
  pOccs = new int[instance.getNTargets()];
  nOccs = new int[instance.getNTargets()];
  pFstLst = new int[2*instance.getNTargets()];
  nFstLst = new int[2*instance.getNTargets()];
  resetSolvers();
}

void draw() {
  // update the data
  if(t > 1) {
    step();
    t=0.0;
  }
  
  tSmooth = smootherstep(0.,1.,t);
  
  // Clear the panel
  background(bgColour[0],bgColour[1],bgColour[2]);
  
  drawSolverType();
  drawScores();
  drawTargets();
  drawVLines();
  drawHLines();
  
  if(stepping)
    t = t + stepSize;
  else
    t = t + nextSize;
}

public void step() {
    pCurrentScore[sIdx] = nCurrentScore[sIdx];
    pBestScore[sIdx]    = nBestScore[sIdx];
    
    // switch the new to the old
    arrayCopy(nextSchedule,prevSchedule);
    // compute the newer one
    if(stepping) {
      nCurrentScore[sIdx] = solver.step(nextSchedule);
    } else {
      nCurrentScore[sIdx] = solver.next(nextSchedule);
    }
    nBestScore[sIdx] = max(nBestScore[sIdx],nCurrentScore[sIdx]);
    t = 0.0;
    
    pLineDist = calcLineDist(prevSchedule);
    nLineDist = calcLineDist(nextSchedule);
    
    for(int t=0;t<instance.getNTargets();++t) {
      pFstLst[t*2]   = getFirst(t,prevSchedule);
      pFstLst[t*2+1] = getLast(t,prevSchedule);  
      nFstLst[t*2]   = getFirst(t,nextSchedule);
      nFstLst[t*2+1] = getLast(t,nextSchedule);
    
    }
    //for(int i : nextSchedule) System.out.print(" "+i);
    //System.out.println();
}

public void drawVLines() {
  resetMatrix();
  float[] c = new float[3];
  for(int i=0;i<nSlots;i++) {
    int prevT = prevSchedule[i];
    int nextT = nextSchedule[i];
    if(prevT >= 0 || nextT >= 0) {
      calcColour(i,c);
      stroke(c[0],c[1],c[2]);
      
      float ph=0,nh=0;
      if(prevT >= 0)
        ph = targetWidth+max(0.f,pLineDist*float(pOccs[prevT]));
      if(prevT%2 == 1) ph = -ph;
      if(nextT >= 0)
        nh = targetWidth+max(0.f,nLineDist*float(nOccs[nextT]));
      if(nextT%2 == 1) nh = -nh;
      float h = lerp(ph,nh,tSmooth);
      line((1+i)*targetWidth,hght*.5
          ,(1+i)*targetWidth,(hght-h)*.5);
    }
  }
}

public void drawHLines() {  
  resetMatrix();
  for(int t = 0;t<instance.getNTargets();++t) {
    float pFirst, pLast, nFirst, nLast;
    if(pFstLst[t*2] >= 0) {
      pFirst = pFstLst[t*2];
      pLast  = pFstLst[t*2+1];
    } else {
      pFirst = (nFstLst[t*2]-nFstLst[t*2+1])*.5;
      pLast  = pFirst;
    }
    if(nFstLst[t*2] >= 0) {
      nFirst = nFstLst[t*2];
      nLast  = nFstLst[t*2+1];
    } else {
      nFirst = (pFstLst[t*2]-pFstLst[t*2+1])*.5;
      nLast  = nFirst;
    }
    
    if((pFirst >= 0 || nFirst >= 0) && 
       (pFirst - pLast != 0 || nFirst - nLast != 0)) {
      stroke(colourTable[t][0]
            ,colourTable[t][1]
            ,colourTable[t][2]);
            
      float ph=0,nh=0;
      ph = targetWidth+max(0.f,pLineDist*float(pOccs[t]));
      if(t%2 == 1) ph = -ph;
      nh = targetWidth+max(0.f,nLineDist*float(nOccs[t]));
      if(t%2 == 1) nh = -nh;
      float h = lerp(ph,nh,tSmooth);
      
      float fst = lerp(pFirst,nFirst,tSmooth);
      float lst = lerp(pLast,nLast,tSmooth);
      
      line((1+fst)*targetWidth,(hght-h)*.5
          ,(1+lst)*targetWidth,(hght-h)*.5);
    }
    
  }
}

public void drawScores() {
  float score;
  
  // draw best score
  score = lerp(pBestScore[sIdx]
              ,nBestScore[sIdx]
              ,tSmooth);
  fill(colourTable[1][0]
      ,colourTable[1][1]
      ,colourTable[1][2]);
  textAlign(LEFT,BOTTOM);
  textSize(txtSze);
  text("  " + max(0,int(score)),wdth/2,hght-padding);
  textSize(txtSze*.8);
  text("   best",wdth/2,hght-padding-txtSze);
  
  // draw the current score
  score = lerp(pCurrentScore[sIdx]
              ,nCurrentScore[sIdx]
              ,tSmooth);
  fill(colourTable[0][0]
      ,colourTable[0][1]
      ,colourTable[0][2]);
  textAlign(RIGHT,BOTTOM);
  textSize(txtSze);
  text(max(0,int(score)) + "  ",wdth/2,hght-padding);
  textSize(txtSze*.8);
  text("current   ",wdth/2,hght-padding-txtSze);
}

void drawSolverType() {
  resetMatrix();
  fill(colourTable[0][0]
      ,colourTable[0][1]
      ,colourTable[0][2]);    
  textSize(txtSze);
  textAlign(CENTER,BOTTOM);
  String t = "Solver Type: " + solver.getName();
  text(t,wdth*.5,textAscent()+padding);
}

void drawTargets() {
  // storage for the colour to draw with
  float[] c = {0.,0.,0.};
  
  resetMatrix();
  translate(0.5*targetWidth,.5*(hght-txtSze));
  scale(targetWidth);
  noStroke();
  for(int i=0;i<nSlots;++i) {
    calcColour(i,c);
    fill(c[0],c[1],c[2]);
    rect(0.,0.,1.,1.,0.1);
    translate(1,0);
  }
}

void keyPressed() {
  switch(key) {
    case 's':
      sIdx = (sIdx+1)%solvers.length;
      solver=solvers[sIdx];
      break;
    case 'n':
      stepping = !stepping;
      break;
    case '[':
      if(stepping) {
        stepSize = max(0,stepSize-0.005);
      } else {
        nextSize = max(0,nextSize-0.005);
      }
      break;
    case ']':
      if(stepping) {
        stepSize = min(1.,stepSize+0.005);
      } else {
        nextSize = min(1.,nextSize+0.005);
      }
      break;
    case CODED:
      switch(keyCode) {
        case LEFT:
          if(stepping) {
            stepSize = max(0,stepSize-0.005);
          } else {
            nextSize = max(0,nextSize-0.005);
          }
          break;
        case RIGHT:
          if(stepping) {
            stepSize = min(1.,stepSize+0.005);
          } else {
            nextSize = min(1.,nextSize+0.005);
          }
          break;
      }
      break;
    default:
      break;
  }
}

void calcColour(int t,float[] c) {
  if(tSmooth < 0.5){
    if(prevSchedule[t]<0) {
      c[0] = 0;
      c[1] = 0;
      c[2] = 0;
    } else {
      c[0] = colourTable[prevSchedule[t]][0];
      c[1] = colourTable[prevSchedule[t]][1];
      c[2] = colourTable[prevSchedule[t]][2];
    }
  } else {
    if(nextSchedule[t]<0) {
      c[0] = 0;
      c[1] = 0;
      c[2] = 0;
    } else {
      c[0] = colourTable[nextSchedule[t]][0];
      c[1] = colourTable[nextSchedule[t]][1];
      c[2] = colourTable[nextSchedule[t]][2];
    }
  } 
  
  if(prevSchedule[t] != nextSchedule[t]) {
    if(tSmooth < 0.5) {
      c[2] = lerp(c[2],0.,2.*tSmooth);
    } else {
      c[2] = lerp(0.,c[2],2.*(tSmooth-.5));
    }
  }
/*
  int ci = prevSchedule[t];
  int cj = nextSchedule[t];

  int[] coli = new int[3];
  int[] colj = new int[3];
  if (ci >= 0) {
    coli[0] = colourTable[ci % nColours][0];
    coli[1] = colourTable[ci % nColours][1];
    coli[2] = colourTable[ci % nColours][2];
  } else {
    coli[0] = 180;
    coli[1] = 100;
    coli[2] = 0;
  }
  if (cj >= 0) {
    colj[0] = colourTable[cj % nColours][0];
    colj[1] = colourTable[cj % nColours][1];
    colj[2] = colourTable[cj % nColours][2];
  } else {
    colj[0] = coli[0];
    colj[1] = 100;
    colj[2] = 0;
  }
  for(int i=0;i<3;++i) {
    c[i] = lerp(coli[i]
               ,colj[i]
               ,tSmooth);
  }
  */
}

/*
void calcColour(int t,float[] out) {
  int ci = prevSchedule[t];
  int cj = nextSchedule[t];

  float[] coli = new float[3];
  float[] colj = new float[3];
  float[] c = new float[3];
  if (ci >= 0) {
    HSBtoRGB(colourTable[ci % nColours][0]/360,
             colourTable[ci % nColours][1]/100,
             colourTable[ci % nColours][2]/100,
             coli[0],
             coli[1],
             coli[2]);
    System.out.println("" + coli[0] + " " + coli[1] + " " + coli[2]);
  } else {
    coli[0] = 0;
    coli[1] = 0;
    coli[2] = 0;
  }
  if (cj >= 0) {
    HSBtoRGB(colourTable[cj % nColours][0],
             colourTable[cj % nColours][1],
             colourTable[cj % nColours][2],
             colj[0],
             colj[1],
             colj[2]);
  } else {
    colj[0] = 0;
    colj[1] = 0;
    colj[2] = 0;
  }
  for(int i=0;i<3;++i) {
    c[i] = lerp(coli[i]
               ,colj[i]
               ,0);
  }
  RGBtoHSB(c[0],c[1],c[2],out[0],out[1],out[2]);
}

void HSBtoRGB(float hue, float saturation, float brightness, float r, float g, float b) {
  if (saturation == 0) {
      r = g = b = (int) (brightness * 255.0f + 0.5f);
  } else {
      float h = (hue - (float)Math.floor(hue)) * 6.0f;
      float f = h - (float)java.lang.Math.floor(h);
      float p = brightness * (1.0f - saturation);
      float q = brightness * (1.0f - saturation * f);
      float t = brightness * (1.0f - (saturation * (1.0f - f)));
      switch ((int) h) {
      case 0:
          r = (int) (brightness * 255.0f + 0.5f);
          g = (int) (t * 255.0f + 0.5f);
          b = (int) (p * 255.0f + 0.5f);
          break;
      case 1:
          r = (int) (q * 255.0f + 0.5f);
          g = (int) (brightness * 255.0f + 0.5f);
          b = (int) (p * 255.0f + 0.5f);
          break;
      case 2:
          r = (int) (p * 255.0f + 0.5f);
          g = (int) (brightness * 255.0f + 0.5f);
          b = (int) (t * 255.0f + 0.5f);
          break;
      case 3:
          r = (int) (p * 255.0f + 0.5f);
          g = (int) (q * 255.0f + 0.5f);
          b = (int) (brightness * 255.0f + 0.5f);
          break;
      case 4:
          r = (int) (t * 255.0f + 0.5f);
          g = (int) (p * 255.0f + 0.5f);
          b = (int) (brightness * 255.0f + 0.5f);
          break;
      case 5:
          r = (int) (brightness * 255.0f + 0.5f);
          g = (int) (p * 255.0f + 0.5f);
          b = (int) (q * 255.0f + 0.5f);
          break;
      }
  }
}

void RGBtoHSB(float r, float g, float b, float hue, float saturation, float brightness) {
  float cmax = (r > g) ? r : g;
  if (b > cmax) cmax = b;
  float cmin = (r < g) ? r : g;
  if (b < cmin) cmin = b;

  brightness = cmax / 255.0f;
  if (cmax != 0)
      saturation = (cmax - cmin) / cmax;
  else
      saturation = 0;
  if (saturation == 0)
      hue = 0;
  else {
      float redc = (cmax - r) / (cmax - cmin);
      float greenc = (cmax - g) / (cmax - cmin);
      float bluec = (cmax - b) / (cmax - cmin);
      if (r == cmax)
          hue = bluec - greenc;
      else if (g == cmax)
          hue = 2.0f + redc - bluec;
      else
          hue = 4.0f + greenc - redc;
      hue = hue / 6.0f;
      if (hue < 0)
          hue = hue + 1.0f;
  }
}
*/
float smootherstep(float edge0, float edge1, float x) {
    // Scale, and saturate x to 0..1 range
    x = constrain(x,edge0,edge1);
    x = map(x,edge0,edge1,0.,1.);
    // Evaluate polynomial
    return x*x*x*(x*(x*6 - 15) + 10);
}

void resetSolvers() {
  t = 0;
  tSmooth = 0;
  
  solvers = new Solver[3];
  solvers[0] = new Backtracking(instance,nSlots);
  solvers[1] = new OneWay(instance,nSlots);
  solvers[2] = new TwoWay(instance,nSlots);
  solver = solvers[sIdx];
  
  prevSchedule = new int[nSlots];
  nextSchedule = new int[nSlots];

  pBestScore = new float[3];
  pCurrentScore = new float[3];
  nBestScore = new float[3];
  nCurrentScore = new float[3];
  
  nCurrentScore[sIdx] = solver.step(nextSchedule);
  nBestScore[sIdx] = nCurrentScore[sIdx];
  
  step();
}

void setInstance(Instance inst,int ns) {
  instance = inst;
  nSlots = ns;
  
  targetWidth = (float)wdth/(nSlots+1);
  
  // Set the solour table
  int nTar = instance.getNTargets();
  
  colourTable = new int[nTar][3];
  
  colourTable[0][0] = 180;
  colourTable[0][1] = 100;
  colourTable[0][2] = brightness;
  
  for(int i=1;i<nTar;++i) {
    colourTable[i][0] = (colourTable[i-1][0] + 197) % 360;
    colourTable[i][1] = 100;
    colourTable[i][2] = brightness;
  }
  
  nColours = colourTable.length;
}

float calcLineDist(int[] s) {
  arrayCopy(nOccs,pOccs);
  for(int i=0;i<instance.getNTargets();++i) {
    nOccs[i] = 0;
  }
  for(int t : s) {
    if(t >= 0)
      nOccs[t] = 1;
  }
  int sum = 0;
  for(int t : nOccs) {
    sum+=t;
  }
  for(int i=1;i<nOccs.length;++i) {
    nOccs[i] += nOccs[i-1];
  }
  return (hght-targetWidth-3*txtSze)/max(1,sum);
}

int getFirst(int t,int[] s) {
  for(int i=0;i<s.length;++i) {
    if(s[i] == t)
      return i;
  }
  return -1;
}

int getLast(int t,int[] s) {
  for(int i=s.length-1;i>=0;--i) {
    if(s[i] == t)
      return i;
  }
  return -1;
}

Instance simpleInstance1() {
  int n = 3;
  int[] exp = {1,1,1};
  int[] cad = {6,5,1};
  float[] g   = {4,3,2}; 
  return new Instance(n,exp,cad,g);
}

Instance bigInstance1() {
  int n = 1763;
  int[] exp = {};
  int[] cad = {};
  float[] g   = {340.0,270.0,210.0,200.0,190.0,160.0,140.0,140.0,140.0,140.0,130.0,120.0,120.0,120.0,110.00000000000001,110.00000000000001,110.00000000000001,100.0,100.0,100.0,99.0,97.0,94.0,93.0,93.0,92.0,90.0,85.0,81.0,76.0,76.0,75.0,75.0,74.0,67.0,66.0,66.0,65.0,65.0,62.0,62.0,61.0,60.0,59.0,57.99999999999999,56.99999999999999,56.99999999999999,55.00000000000001,55.00000000000001,54.0,54.0,52.0,52.0,51.0,51.0,50.0,50.0,50.0,49.0,48.0,47.0,47.0,47.0,46.0,46.0,45.0,43.0,42.0,42.0,41.0,39.0,38.0,38.0,37.0,37.0,37.0,36.0,35.0,35.0,34.0,34.0,33.0,32.0,32.0,32.0,32.0,32.0,31.0,30.0,28.999999999999996,28.999999999999996,28.000000000000004,28.000000000000004,28.000000000000004,28.000000000000004,27.0,27.0,27.0,27.0,27.0,27.0,27.0,26.0,26.0,26.0,26.0,26.0,26.0,25.0,25.0,25.0,24.0,24.0,24.0,23.0,23.0,23.0,22.0,22.0,22.0,22.0,22.0,22.0,21.0,21.0,21.0,20.0,20.0,20.0,20.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,18.0,18.0,18.0,18.0,18.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,14.000000000000002,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,7.000000000000001,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.98,0.98,0.98,0.98,0.97,0.97,0.96,0.95,0.95,0.9400000000000001,0.9199999999999999,0.9199999999999999,0.91,0.8999999999999999,0.8999999999999999,0.8999999999999999,0.8999999999999999,0.89,0.89,0.89,0.89,0.89,0.88,0.88,0.8699999999999999,0.8500000000000001,0.8500000000000001,0.84,0.84,0.84,0.83,0.83,0.83,0.8200000000000001,0.8200000000000001,0.8200000000000001,0.8099999999999999,0.8099999999999999,0.8099999999999999,0.8099999999999999,0.8,0.8,0.8,0.8,0.79,0.79,0.79,0.79,0.79,0.7799999999999999,0.7799999999999999,0.77,0.77,0.77,0.76,0.76,0.75,0.75,0.74,0.74,0.74,0.74,0.74,0.74,0.74,0.73,0.73,0.73,0.72,0.72,0.72,0.72,0.72,0.7100000000000001,0.7100000000000001,0.7100000000000001,0.7100000000000001,0.7000000000000001,0.7000000000000001,0.7000000000000001,0.69,0.69,0.69,0.69,0.69,0.69,0.69,0.6799999999999999,0.6799999999999999,0.6799999999999999,0.6799999999999999,0.6799999999999999,0.67,0.66,0.66,0.66,0.66,0.66,0.66,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.65,0.64,0.64,0.63,0.63,0.63,0.63,0.62,0.62,0.62,0.62,0.62,0.61,0.61,0.61,0.61,0.61,0.6,0.6,0.6,0.59,0.59,0.58,0.58,0.58,0.58,0.58,0.58,0.58,0.5700000000000001,0.5700000000000001,0.5700000000000001,0.5700000000000001,0.5700000000000001,0.5599999999999999,0.5599999999999999,0.5599999999999999,0.5499999999999999,0.5499999999999999,0.54,0.54,0.54,0.54,0.53,0.53,0.53,0.53,0.53,0.53,0.53,0.53,0.53,0.53,0.53,0.53,0.52,0.52,0.52,0.52,0.52,0.52,0.52,0.52,0.51,0.51,0.51,0.51,0.51,0.51,0.5,0.5,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.48,0.48,0.48,0.48,0.48,0.48,0.48,0.48,0.47000000000000003,0.47000000000000003,0.47000000000000003,0.47000000000000003,0.47000000000000003,0.47000000000000003,0.47000000000000003,0.47000000000000003,0.47000000000000003,0.47000000000000003,0.47000000000000003,0.47000000000000003,0.45999999999999996,0.45999999999999996,0.45999999999999996,0.45999999999999996,0.45999999999999996,0.45999999999999996,0.44999999999999996,0.44999999999999996,0.44999999999999996,0.44,0.44,0.44,0.44,0.44,0.44,0.44,0.44,0.44,0.44,0.44,0.44,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.42,0.42,0.42,0.42,0.41000000000000003,0.41000000000000003,0.41000000000000003,0.41000000000000003,0.4,0.4,0.4,0.4,0.38999999999999996,0.38999999999999996,0.38999999999999996,0.38999999999999996,0.38999999999999996,0.38999999999999996,0.38999999999999996,0.38999999999999996,0.38999999999999996,0.38999999999999996,0.38999999999999996,0.38999999999999996,0.38,0.38,0.38,0.38,0.38,0.37,0.37,0.37,0.37,0.37,0.37,0.37,0.37,0.37,0.36,0.36,0.35000000000000003,0.35000000000000003,0.35000000000000003,0.35000000000000003,0.35000000000000003,0.35000000000000003,0.33999999999999997,0.33999999999999997,0.33999999999999997,0.33999999999999997,0.33,0.33,0.33,0.32,0.32,0.32,0.32,0.31,0.31,0.31,0.31,0.31,0.31,0.31,0.31,0.3,0.3,0.3,0.29,0.29,0.29,0.29,0.29,0.29,0.29,0.29,0.29,0.29,0.29,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27999999999999997,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.26,0.26,0.26,0.26,0.26,0.26,0.26,0.26,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.22999999999999998,0.22999999999999998,0.22999999999999998,0.22999999999999998,0.22999999999999998,0.22999999999999998,0.22999999999999998,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.21,0.21,0.21,0.21,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.19,0.19,0.19,0.19,0.19,0.19,0.19,0.19,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16999999999999998,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.16,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13999999999999999,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.099,0.098,0.098,0.098,0.097,0.096,0.096,0.096,0.096,0.095,0.095,0.095,0.095,0.094,0.093,0.092,0.091,0.091,0.09,0.09,0.089,0.089,0.089,0.087,0.087,0.086,0.086,0.086,0.086,0.08499999999999999,0.08499999999999999,0.08499999999999999,0.083,0.083,0.083,0.082,0.082,0.08099999999999999,0.08099999999999999,0.08,0.08,0.079,0.079,0.079,0.079,0.079,0.078,0.078,0.078,0.078,0.078,0.077,0.077,0.076,0.076,0.075,0.074,0.074,0.073,0.073,0.07200000000000001,0.07100000000000001,0.07100000000000001,0.06999999999999999,0.06999999999999999,0.06999999999999999,0.06999999999999999,0.06899999999999999,0.06899999999999999,0.068,0.068,0.068,0.068,0.068,0.067,0.067,0.067,0.066,0.066,0.065,0.065,0.064,0.064,0.063,0.063,0.063,0.063,0.062,0.062,0.062,0.061,0.061,0.061,0.061,0.06,0.06,0.06,0.059000000000000004,0.059000000000000004,0.059000000000000004,0.059000000000000004,0.058,0.058,0.058,0.056999999999999995,0.056999999999999995,0.056999999999999995,0.055999999999999994,0.055999999999999994,0.055,0.055,0.055,0.055,0.055,0.054,0.054,0.053,0.053,0.053,0.053,0.053,0.052,0.051000000000000004,0.051000000000000004,0.051000000000000004,0.05,0.05,0.05,0.05,0.049,0.049,0.049,0.049,0.048,0.047,0.047,0.047,0.047,0.047,0.046,0.046,0.046,0.045,0.045,0.045,0.045,0.045,0.045,0.044000000000000004,0.044000000000000004,0.044000000000000004,0.044000000000000004,0.044000000000000004,0.044000000000000004,0.043,0.043,0.043,0.042,0.042,0.042,0.041,0.041,0.04,0.04,0.04,0.04,0.039,0.039,0.039,0.039,0.038,0.036000000000000004,0.036000000000000004,0.036000000000000004,0.036000000000000004,0.034999999999999996,0.034999999999999996,0.034999999999999996,0.034999999999999996,0.034999999999999996,0.034,0.034,0.034,0.034,0.033,0.033,0.033,0.032,0.032,0.032,0.032,0.031,0.031,0.031,0.03,0.029,0.029,0.029,0.029,0.029,0.027999999999999997,0.027999999999999997,0.027999999999999997,0.027999999999999997,0.027999999999999997,0.027,0.027,0.026,0.025,0.025,0.025,0.025,0.025,0.024,0.024,0.023,0.023,0.022000000000000002,0.022000000000000002,0.022000000000000002,0.022000000000000002,0.022000000000000002,0.022000000000000002,0.021,0.021,0.021,0.021,0.021,0.021,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.019,0.019,0.019,0.019,0.019,0.019,0.019,0.019,0.019,0.019,0.019,0.018000000000000002,0.018000000000000002,0.018000000000000002,0.017,0.017,0.017,0.017,0.017,0.017,0.016,0.016,0.016,0.016,0.016,0.016,0.016,0.015,0.015,0.015,0.013999999999999999,0.013999999999999999,0.013999999999999999,0.013999999999999999,0.013999999999999999,0.013999999999999999,0.013999999999999999,0.013999999999999999,0.013999999999999999,0.013,0.013,0.013,0.013,0.013,0.013,0.013,0.012,0.012,0.012,0.012,0.012,0.012,0.012,0.012,0.012,0.011000000000000001,0.011000000000000001,0.011000000000000001,0.011000000000000001,0.011000000000000001,0.011000000000000001,0.011000000000000001,0.011000000000000001,0.011000000000000001,0.011000000000000001,0.01,0.01,0.01,0.01,0.01,0.01,0.0098,0.0098,0.0095,0.0093,0.0088,0.0087,0.0086,0.0086,0.0086,0.0086,0.0085,0.0083,0.0081,0.0081,0.008,0.008,0.008,0.008,0.0078,0.0077,0.0072,0.006999999999999999,0.0069,0.0068,0.0067,0.0067,0.006600000000000001,0.0063999999999999994,0.0063,0.0060999999999999995,0.006,0.006,0.006,0.006,0.0056,0.0055000000000000005,0.0055000000000000005,0.0051,0.005,0.0049,0.0049,0.0048000000000000004,0.0048000000000000004,0.004699999999999999,0.004699999999999999,0.0044,0.0043,0.0042,0.0041,0.004,0.004,0.0039,0.0039,0.0038000000000000004,0.0036999999999999997,0.0034,0.0033000000000000004,0.0033000000000000004,0.0033000000000000004,0.0031000000000000003,0.0031000000000000003,0.0029,0.0029,0.0028,0.0025,0.0025,0.0024000000000000002,0.0022,0.0022,0.0022,0.0021,0.0021,0.002,0.002,0.002,0.002,0.0019000000000000002,0.0018,0.0018,0.0018,0.0017,0.0017,0.0017,0.0017,0.0015,0.0015,0.0014,0.0013,0.0013,0.0012000000000000001,0.0012000000000000001,0.0012000000000000001,0.0011,0.0011,0.001,9.2E-4,9.099999999999999E-4,9.0E-4,9.0E-4,9.0E-4,8.9E-4,8.8E-4,8.600000000000001E-4,7.9E-4,7.8E-4,7.199999999999999E-4,6.000000000000001E-4,5.6E-4,5.3E-4,4.9E-4,4.7E-4,4.7E-4,4.5E-4,3.9999999999999996E-4,3.5E-4,3.4E-4,2.8E-4,2.3E-4,2.2E-4,1.3000000000000002E-4,9.999999999999999E-5,9.5E-5,8.999999999999999E-5,8.9E-5,6.500000000000001E-5,6.4E-5,6.1E-5,5.1E-5,4.3E-5,1.4999999999999999E-5,3.8000000000000005E-6,};
  return new Instance(n,exp,cad,g);
}
